import wixData from "wix-data";

// Match students into study groups
export async function matchGroups() {
  let studyGroups = [];

  // Get the students' information from the database
  const students = await getStudentsInfo();

  // Assign the students to the study groups
  assignStudentsToStudyGroups(students, studyGroups);

  // Assign the remaining students to the study groups
  assignRemainingStudents(students, studyGroups);

  return studyGroups;
}

// Get the students' information from the database
async function getStudentsInfo() {
  let students = [];

  await wixData
    .query("Preference")
    .include("student", "first", "second", "third", "friends")
    .find()
    .then(
      // Handle the returned collection of items
      (preferences) => {
        // Check if preferences were found
        if (preferences.items.length > 0) {
          // Add each student's information to the array
          preferences.items.forEach((preference) => {
            students.push({
              studentId: preference.student.studentId,
              name: preference.student.name,
              coursePriority: [
                { courseId: preference.first.courseId, subject: preference.first.subject, instructor: preference.first.instructor },
                { courseId: preference.second.courseId, subject: preference.second.subject, instructor: preference.second.instructor },
                { courseId: preference.third.courseId, subject: preference.third.subject, instructor: preference.third.instructor },
              ],
              desiredFriends: preference.friends.map((friend) => ({ studentId: friend.studentId, name: friend.name })),
            });
          });
        } else {
          // Handle case where no preferences were found
          console.log("No preferences found");
        }
      },
      // Handle potential errors
      (error) => {
        console.error(error.message);
      }
    );

  return students;
}

// Assign the students to the study groups
function assignStudentsToStudyGroups(students, studyGroups) {
  students.forEach((student) => {
    let studyGroup = undefined;

    // Find a study group with a course that the student wants to study
    student.coursePriority.forEach((course) => {
      studyGroup = studyGroups.find((group) => group.course === course);

      // If the study group exists and has a vacancy, add the student to it
      if (studyGroup !== undefined && hasVacancy(studyGroup)) {
        studyGroup.members.push({ studentId: student.studentId, name: student.name });
        return;
      }
    });

    // If the study group doesn't exist or doesn't have a vacancy, create a new one
    if (studyGroup === undefined || !hasVacancy(studyGroup)) {
      // Get the friends' study groups
      const friendsStudyGroups = getFriendsStudyGroups(student, studyGroups);

      // Find the first available study group among friends' study groups
      studyGroup = friendsStudyGroups.find((group) => hasVacancy(group));

      // If no study group is available among friends' study groups, create a new one
      if (studyGroup === undefined) {
        studyGroups.push({ courseInfo: student.coursePriority[0], members: [{ studentId: student.studentId, name: student.name }] });
      }
    }
  });
}

// Get the study groups of a student's friends
function getFriendsStudyGroups(student, studyGroups) {
  const friendsStudyGroups = [];

  student.desiredFriends.forEach((friend) => {
    studyGroups.forEach((group) => {
      if (group.members.some((member) => member.studentId === friend.studentId)) {
        friendsStudyGroups.push(group);
      }
    });
  });

  return friendsStudyGroups;
}

// Assign the remaining students to the study groups
function assignRemainingStudents(students, studyGroups) {
  students.forEach((student) => {
    // Check if the student is already assigned to a study group
    let isAssignedToStudyGroup = studyGroups.some((studyGroup) => studyGroup.members.includes(student));
    if (!isAssignedToStudyGroup) {
      studyGroups.forEach((studyGroup) => {
        // If the study group has a vacancy, add the student to it
        if (hasVacancy(studyGroup)) {
          studyGroup.members.push({ studentId: student.studentId, name: student.name });
          isAssignedToStudyGroup = true;
          return;
        }
      });

      // If the student is still not assigned to a study group, create a new one
      if (!isAssignedToStudyGroup) {
        studyGroups.push({ courseInfo: student.coursePriority[0], members: [{ studentId: student.studentId, name: student.name }] });
      }
    }
  });
}

// Check if the study group has a vacancy for another student
function hasVacancy(studyGroup) {
  return studyGroup.members.length < 4; // Max capacity: 4
}
