import wixData from "wix-data";

export async function getStudentsInfo() {
  let students = [];
  const preferences = await wixData.query("Preference").include("friends").find();

  preferences.items.forEach((preference) => {
    students.push({
      id: preference.student,
      coursePriority: [preference.first, preference.second, preference.third],
      desiredFriends: preference.friends.map((friend) => friend._id),
    });
  });

  return students;
}

export function matchGroups(studentsPreferences) {
  let studyGroups = [];

  for (let student of studentsPreferences) {
    if (student.friend !== null && student.friend.friend === student) {
      let studyGroup = null;

      for (let course of student.coursePriority) {
        studyGroup = findStudyGroupByCourse(studyGroups, course);

        // If the study group exists and has a vacancy, add the student to it
        if (studyGroup !== null && hasVacancy(studyGroup)) {
          addStudentToStudyGroup(student, studyGroup);
          break;
        }
      }

      // If the study group doesn't exist or doesn't have a vacancy, create a new one
      if (studyGroup === null || !hasVacancy(studyGroup)) {
        studyGroup = createStudyGroup(course);
        addStudentToStudyGroup(student, studyGroup);
      }
    }
  }

  // Assign the remaining students to the study groups
  assignRemainingStudents(studentsPreferences, studyGroups);

  return studyGroups;
}

function findStudyGroupByCourse(studyGroups, course) {
  // Find a study group with the given course
  for (let group of studyGroups) {
    if (group.course === course) {
      return group;
    }
  }

  return null;
}

function hasVacancy(studyGroup) {
  // Check if the study group has a vacancy for another student
  return studyGroup.members.length < 4; // Max capacity: 4
}

function addStudentToStudyGroup(student, studyGroup) {
  // Add the student to the study group
  studyGroup.members.push(student);
}

function createStudyGroup(course) {
  // Create a new study group for the given course
  let studyGroup = { course: course, members: [] };
  studyGroups.push(studyGroup);

  return studyGroup;
}

function assignRemainingStudents(studentsPreferences, studyGroups) {
  for (let student of studentsPreferences) {
    if (!isAssignedToStudyGroup(student, studyGroups)) {
      for (let studyGroup of studyGroups) {
        if (hasVacancy(studyGroup)) {
          addStudentToStudyGroup(student, studyGroup);
          break;
        }
      }
    }
  }
}

function isAssignedToStudyGroup(student, studyGroups) {
  for (let studyGroup of studyGroups) {
    if (studyGroup.members.includes(student)) {
      return true;
    }
  }

  return false;
}
